#+title: 从零配置emacs教程
#+roam_tags: blog

* Table of Contents
:PROPERTIES:
:TOC:      :include all :depth 5
:END:
:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#前言][前言]]
- [[#下载哪一个emacs版本][下载哪一个emacs版本]]
- [[#如何安装-emacs-mac][如何安装 emacs-mac]]
- [[#如何在多份配置之间进行切换][如何在多份配置之间进行切换]]
  - [[#有哪些方案可以选择][有哪些方案可以选择?]]
  - [[#方案-3-的实践细节][方案 3 的实践细节]]
- [[#emacs-基础配置][emacs 基础配置]]
  - [[#设置显示行号][设置显示行号]]
  - [[#开启语法高亮][开启语法高亮]]
  - [[#关闭tool-bar-menu-bar-scroll-bar][关闭tool-bar, menu-bar, scroll-bar]]
  - [[#显示时间][显示时间]]
  - [[#自动换行][自动换行]]
  - [[#隐藏开始界面][隐藏开始界面]]
  - [[#设置光标样式][设置光标样式]]
  - [[#自动括号匹配][自动括号匹配]]
  - [[#关闭警告提示音][关闭警告提示音]]
  - [[#设置默认开启全屏][设置默认开启全屏]]
  - [[#设置选中文本敲入字符替换][设置选中文本敲入字符替换]]
  - [[#设置在当前窗口打开dired视图][设置在当前窗口打开dired视图]]
- [[#backup-相关参数设置][backup 相关参数设置]]
- [[#代理proxy设置方式][代理proxy设置方式]]
  - [[#socks-设置][socks 设置]]
  - [[#url-proxy-services][url-proxy-services]]
  - [[#telega][telega]]
  - [[#启动的时候设置][启动的时候设置]]
- [[#macos-modifier-键位][macos modifier 键位]]
- [[#配置自动下载package的方式][配置自动下载package的方式]]
- [[#emacs-三件套ivycounselswiper][Emacs 三件套Ivy,Counsel,Swiper]]
  - [[#简介][简介]]
  - [[#安装][安装]]
  - [[#常规设置][常规设置]]
  - [[#去掉--前缀][去掉 ^ 前缀]]
  - [[#使用-esc-关闭-counsel-swiper-窗口][使用 ESC 关闭 counsel swiper 窗口]]
  - [[#调整-counsel-搜索的方式-忽略单词顺序][调整 counsel 搜索的方式: 忽略单词顺序]]
  - [[#ivy-immediate-done-快捷键的设置][ivy-immediate-done 快捷键的设置]]
- [[#ivy-rich-的配置][ivy-rich 的配置]]
- [[#evil-插件][evil 插件]]
  - [[#安装][安装]]
  - [[#启用][启用]]
  - [[#evil-collection][evil-collection]]
- [[#文本过长自动换行][文本过长自动换行]]
- [[#实时显示event和command历史][实时显示event和command历史]]
- [[#安装主题][安装主题]]
  - [[#主题的切换][主题的切换]]
  - [[#包管理器中的可用包][包管理器中的可用包]]
  - [[#onedark-主题-配置过程][onedark 主题 配置过程]]
    - [[#下载-one-dark][下载 one dark]]
    - [[#复制主题到emacs的配置文件夹内][复制主题到emacs的配置文件夹内]]
    - [[#配置主题加载文件夹信息启用主题][配置主题加载文件夹信息,启用主题]]
- [[#emacs-roam][emacs roam]]
  - [[#install][install]]
  - [[#常规设置][常规设置]]
  - [[#roam-protocol][Roam Protocol]]
    - [[#配置中启用-org-roam-protocol][配置中启用 Org-roam protocol]]
    - [[#为-emacsclient-创建一个桌面应用][为 emacsclient 创建一个桌面应用]]
    - [[#禁止-chrome-弹出提示][禁止 chrome 弹出提示]]
    - [[#roam-template-ref][roam template ref]]
  - [[#roam快捷键设置][roam快捷键设置]]
- [[#org-下常见问题修复][org 下常见问题修复]]
  - [[#evil-导致org-link-按回车异常问题修复][evil 导致org link 按回车异常问题修复]]
  - [[#终端下-org-tab-无法执行-org-cycle][终端下 org TAB 无法执行 org-cycle]]
  - [[#c-e-被evil占用][C-e 被evil占用]]
  - [[#org-在同一个窗口下打开文件][org 在同一个窗口下打开文件]]
- [[#设置新建windows之后-光标跟着移动过去][设置新建windows之后, 光标跟着移动过去]]
- [[#设置-org-meta-快捷键][设置 org meta 快捷键]]
- [[#设置光标样式][设置光标样式]]
- [[#让-org-更好看][让 org 更好看]]
- [[#yasnippet][yasnippet]]
  - [[#install][install]]
  - [[#usage][usage]]
  - [[#how-bind-keys-to-a-specific-snippet-in-yasnippet-folder][How bind keys to a specific snippet in yasnippet folder?]]
- [[#grab-mac-link][grab-mac-link]]
  - [[#install][install]]
  - [[#usage][usage]]
- [[#magit][magit]]
- [[#telega][telega]]
  - [[#install][install]]
  - [[#设置代理][设置代理]]
  - [[#去掉头像-名字][去掉头像, 名字]]
  - [[#使用外部的app打开-mp4][使用外部的app打开 mp4]]
  - [[#writeroom-设置][writeroom 设置]]
  - [[#设置快捷键][设置快捷键]]
  - [[#常用操作][常用操作]]
    - [[#telega前缀map绑定][Telega前缀map绑定：]]
    - [[#常用操作][常用操作]]
    - [[#发送消息markdown格式][发送消息Markdown格式]]
    - [[#发送流媒体--photo-png-gif-vedio][发送流媒体 : photo, png, gif, vedio]]
    - [[#聊天内容过滤搜索][聊天内容过滤搜索]]
- [[#easymotion][easymotion]]
  - [[#install][install]]
  - [[#usage][usage]]
  - [[#keybinding][keybinding]]
- [[#当打开多个emacs进程的时候-根据-pid-打开-application][当打开多个emacs进程的时候, 根据 pid 打开 application]]
  - [[#简单学习一下-appliscript][简单学习一下 appliscript]]
  - [[#使用-applescript-根据-pid-打开-application][使用 applescript 根据 pid 打开 application]]
- [[#undo-redo][undo redo]]
- [[#winner-mode][winner mode]]
- [[#projectile][projectile]]
  - [[#install][install]]
  - [[#usage][usage]]
    - [[#command][command]]
- [[#注释-comment][注释 comment]]
  - [[#install][install]]
  - [[#usage][usage]]
- [[#不用移动光标-实现org-link的快速跳转][不用移动光标, 实现org link的快速跳转]]
  - [[#方案][方案]]
  - [[#使用][使用]]
- [[#使用数字在window之间跳转][使用数字在window之间跳转]]
- [[#快速创建-scratch-buffer][快速创建 scratch-buffer]]
- [[#emacs-frame-键位绑定][emacs frame 键位绑定]]
  - [[#命令][命令]]
  - [[#keybinding][keybinding]]
  - [[#frame-自动全屏设置][frame 自动全屏设置]]
  - [[#emacsclient--c-替代-make-frame][emacsclient -c 替代 make-frame]]
- [[#reveal-in-finder--从emacs直接跳转的finder][reveal in finder : 从emacs直接跳转的finder]]
- [[#emacs-open-eshell-not-fullscreen][emacs open eshell not fullscreen]]
- [[#emacs-打开终端-iterm][emacs 打开终端 iTerm]]
- [[#yes-or-no][yes or no]]
- [[#emacs-kill-other-buffers-kill-all-buffers][emacs kill-other-buffers kill-all-buffers]]
- [[#emacs-kill-this-file][emacs kill-this-file]]
- [[#emacs-amx][emacs amx]]
  - [[#install][install]]
  - [[#usage][usage]]
  - [[#amx-save-file][amx-save-file]]
  - [[#completion-backends][Completion backends]]
  - [[#speeding-up-amx][Speeding up Amx]]
  - [[#amx-对-counsel-m-x-排序的加成][amx 对 counsel-M-x 排序的加成]]
- [[#early-initel][early-init.el]]
  - [[#compatibility-with-emacs-26][Compatibility with Emacs 26]]
  - [[#启动优化项][启动优化项]]
- [[#emacs-org-download][emacs org-download]]
  - [[#introduce][introduce]]
  - [[#setting][setting]]
- [[#latex][latex]]
- [[#org-capture][org-capture]]
- [[#emacs-writeroom-mode][emacs writeroom mode]]
- [[#括号导航相关函数][括号导航相关函数]]
- [[#which-key][which-key]]
  - [[#install][install]]
  - [[#usage][usage]]
    - [[#定义快捷键说明文本][定义快捷键说明文本]]
    - [[#有用选项][有用选项]]
- [[#敏感信息的处理][敏感信息的处理]]
- [[#行或者mode-line背景颜色设置][行或者mode-line背景颜色设置]]
:END:

*  前言
我使用的操作系统: Macos. 

我的一份完整的配置信息在 [[file:README.org][这里]]
* 下载哪一个emacs版本 

一般在Mac上不建议安装gnu-emacs, 会推荐安装 emacs-mac 以及 emacs-plus.两者各有优劣.
emacs-mac 显示公式或者图片的时候, 不会模糊. 但是带 去标题栏 的选项的时候会有一个bug : 窗口永远全屏(有一个不完美的解决方案).
emacs-plus 能完美去标题栏, 但是显示图片的时候有明显的模糊感.

我推荐使用emacs-mac, 毕竟图片显示模糊可是硬伤. 如果你不是洁癖(嫌标题栏占用空间), 你可以不带去标题栏选项. 即使带了标题选项你可以通过多开一个 frame 来解决.
* 如何安装 emacs-mac
#+begin_src
brew tap railwaycat/emacsmacport
brew cask install emacs-mac --with-no-title-bars --with-rsvg
#+end_src

Emacs-mac 安装的时候加 =--with-rsvg= 添加rsvg的支持, 是package telega 的需求.

安装完成之后
#+begin_src
ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications
#+end_src
* 如何在多份配置之间进行切换 

** 有哪些方案可以选择?
1. 重命名 .emacs.d 以及 .emacs 的方式
2. [[https://github.com/plexus/chemacs][chemacs]] 插件
3. emacs 的命令 =emacs -q -l=

方案 1 过于粗糙.
方案 2 引入额外的插件, 故而不考虑.出于奥卡姆剃刀原则
方案 3 在不影响之前的配置前提下, 只需要使用命令改变加载初始文件的入口, 可以考虑
** 方案 3 的实践细节
新建配置目录以及配置文件:
#+begin_src shell
mkdir ~/.emacs.d.imymirror
touch ~/.emacs.d.imymirror/init.el
#+end_src

init.el 里设置 =user-init-file= , =user-emacs-directory=
#+begin_src elisp
(setq user-init-file (or load-file-name (buffer-file-name)))
(setq user-emacs-directory (file-name-directory user-init-file))
#+end_src

终端运行 
#+begin_src elisp
open -n /Applications/Emacs.app --args -q -l ~/.emacs.d.imymirror/init.el 

emacs -q -l ~/.emacs.d.imymirror/init.el
open -n /Applications/Emacs.app --args --daemon
#+end_src

使用gui版本打开
#+begin_src
/Applications/Emacs.app/Contents/MacOS/Emacs -q -l ~/.emacs.d.imymirror/init.el
#+end_src

=-q= : 跳过默认的初始文件 =~/.emacs.d/init.el=
=-l= : 加载指定的 =init.el=
* emacs 基础配置 
详见 [[file:.emacs.d/lisp/init-basic.el][init-basic.el]]
** 设置显示行号
#+begin_src elisp
(global-linum-mode 1)
;; (setq linum-format "%d| ")
#+end_src
要显示相对行号, 需要安装 [[https://github.com/coldnew/linum-relative][linum-relative]]
** 开启语法高亮
#+begin_src elisp
;; hightlight
(global-hl-line-mode 1)
#+end_src
** 关闭tool-bar, menu-bar, scroll-bar
#+begin_src elisp
;; hide toolbar menubar scrollbar
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
#+end_src
** 显示时间
#+begin_src elisp
;; show time
(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
#+end_src
** 自动换行
有[[file:20210213015653-emacs_auto_word_wrap.org][两种]]方式来自动换行
#+begin_src elisp
(toggle-truncate-lines 1) ;; 关闭自动换行
#+end_src
** 隐藏开始界面
#+begin_src elisp
;; hide startup message
(setq inhibit-startup-message t)
#+end_src
** 设置光标样式
#+begin_src elisp
(setq-default cursor-type 'bar)
#+end_src
** 自动括号匹配
#+begin_src elisp
(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
#+end_src
** 关闭警告提示音
#+begin_src elisp
(setq ring-bell-function 'ignore)
#+end_src
** 设置默认开启全屏
#+begin_src elisp
(setq initial-frame-alist (quote ((fullscreen . maximized))))
;;(setq default-frame-alist (quote ((fullscreen . maximized))))
#+end_src
[[file:20210213013133-initial_frame_alist_vs_default_frame_alist.org][initial-frame-alist vs default-frame-alist]]
** 设置选中文本敲入字符替换
#+begin_src elisp
(delete-selection-mode 1)
#+end_src
** 设置在当前窗口打开dired视图
#+begin_src elisp
(put 'dired-find-alternate-file 'disabled nil)
#+end_src
* backup 相关参数设置 
#+begin_src elisp
(setq
     backup-by-copying t ;enable backup 
     backup-directory-alist
     '(("." . "~/.emacs.d.imymirror/backup")) ; backup directory
     delete-old-versions t  
     kept-new-versions 3 ; keep recently 3 version
     kept-old-versions 1 ; keep oldest version
     version-control t) 
#+end_src
* 代理proxy设置方式
** socks 设置
#+begin_src elisp
(setq url-gateway-method 'socks)
(setq socks-server '("Default server" "127.0.0.1" 51501 5))
#+end_src
** url-proxy-services
#+begin_src elisp
(setq url-proxy-services
   '(("no_proxy" . "^\\(localhost\\|10.*\\)")
     ("http" . "proxy.com:51501")
     ("https" . "proxy.com:51501")))
#+end_src

#+begin_src elisp
(setq url-proxy-services
      '(
        ("http" . "127.0.0.1:51501")
        ("https" . "127.0.0.1:51501")
        ))
#+end_src
** telega
#+begin_src elisp
(setq telega-proxies
      (list
       '(:server "127.0.0.1" :port 51501 :enable t
                 :type (:@type "proxyTypeSocks5"
                 :username "your-username" :password "your-password"))
       ))

#+end_src
** 启动的时候设置
启动时候添加 `http_proxy=http://127.0.0.1:51501 emacs`

或者终端先执行
#+begin_src sh
http_proxy=http://127.0.0.1:51501 https_proxy=http://127.0.0.1:51501 
#+end_src
* macos modifier 键位
#+begin_src elisp
 (setq mac-option-key-is-meta t
       x-select-enable-clipboard 't
       ;; mac-command-key-is-meta nil
       mac-command-modifier 'super
       mac-option-modifier 'meta)
#+end_src
* 配置自动下载package的方式
安装package的时候, 将package的名称填入 package-list的列表中.

#+begin_src elisp
; list the repositories containing them
(setq package-archives '(("elpa" . "http://tromey.com/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")))

; activate all the packages (in particular autoloads)
(package-initialize)

; list the packages you want
(setq package-list '(projectile ivy org-roam org-roam-server grab-mac-link evil-nerd-commenter))

; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
   (unless (package-installed-p package)
     (package-install package)))
#+end_src

参考 [[https://stackoverflow.com/questions/10092322/how-to-automatically-install-emacs-packages-by-specifying-a-list-of-package-name#:~:text=Emacs%2025.1%2B%20will%20automatically%20keep,install%2Dselected%2Dpackages%20function.][installation - How to automatically install Emacs packages by specifying a list of package names? - Stack Overflow]]
* Emacs 三件套Ivy,Counsel,Swiper

** 简介
Ivy 是一个补全工具,用以增强M-x和`C-x b`的功能,与Helm功能相似.

[[https://oremacs.com/swiper/][Ivy User Manual]] [[https://github.com/abo-abo/swiper/blob/master/doc/ivy.org][github swiper]]

Ivy : Emacs通用的补全机制
Counsel : Emacs 命令行补全集合(M-x)
Swiper : isearch 的替代品,文件内查找
** 安装
Ivy 有两个实现: GNU ELPA 和 MELPA.

使用 M-x 安装的是 GNU ELPA 最新稳定的版本.
#+begin_src
M-x package-install RET ivy RE
#+end_src

MELPA 实现的版本中 Ivy被分成了三个包: ivy , wsiper , counsel.
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
#+end_src

#+begin_src
M-x package-refresh-contents RET
M-x package-install RET counsel RE
#+end_src
** 常规设置
#+begin_src elisp
ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
#+end_src
** 去掉 ^ 前缀
#+begin_src elisp
;; delete M-x ^
(with-eval-after-load 'counsel
  (setq ivy-initial-inputs-alist nil))
#+end_src
** 使用 ESC 关闭 counsel swiper 窗口
#+begin_src elisp
(define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
#+end_src
** 调整 counsel 搜索的方式: 忽略单词顺序
#+begin_src elisp
(setq ivy-re-builders-alist
'((counsel-rg . ivy--regex-plus)
 (swiper . ivy--regex-plus)
 (swiper-isearch . ivy--regex-plus)
 (t . ivy--regex-ignore-order)))
#+end_src
** ivy-immediate-done 快捷键的设置
#+begin_src elisp
(general-define-key "C-; d" 'ivy-immediate-done)
#+end_src
* ivy-rich 的配置 
安装 ivy-rich 上为了显示 命令或者变量的更详细的信息.
#+ATTR_ORG: :width 500 
[[file:image/20210222-133201_screenshot.png]]



#+begin_src elisp
(require 'ivy-rich)
(ivy-rich-mode 1)
(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)

(setq ivy-rich-modify-column 'ivy-switch-buffer
                          'ivy-rich-switch-buffer-major-mode
                          '(:width 20 :face error))
                          
(setq ivy-rich-display-transformers-list
      '(ivy-switch-buffer
        (:columns
         ((ivy-rich-switch-buffer-icon (:width 2))
          (ivy-rich-candidate (:width 30))
          (ivy-rich-switch-buffer-size (:width 7))
          (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
          (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
          (ivy-rich-switch-buffer-project (:width 15 :face success))
          (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
         :predicate
         (lambda (cand) (get-buffer cand)))))
#+end_src
* evil 插件
** 安装
#+begin_src elisp
;; Set up package.el to work with MELPA
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
(package-refresh-contents)

;; Download Evil
(unless (package-installed-p 'evil)
  (package-install 'evil))
#+end_src
** 启用
#+begin_src elisp
;; Enable Evil
(require 'evil)
(evil-mode 1)
#+end_src
** evil-collection
evil-collection package安装后会提供更多的evil风格的键位绑定

#+begin_src elisp
(setq evil-want-integration t) ;; This is optional since it's already set to t by default.
(setq evil-want-keybinding nil)
(require 'evil)
 (when (require 'evil-collection nil t)
   (evil-collection-init)) 

(evil-collection-magit-setup)
#+end_src
* 文本过长自动换行
方式1 : 
M + x  global-visual-line-mode 
#+begin_src elisp
(global-visual-line-mode 1) ; 1 for on, 0 for off.
#+end_src

方式2 : 
#+begin_src elisp
(set-default 'truncate-lines nil)
#+end_src
以上设置在 org-mode 里会无效, 因为org mode 默认会打开 truncate-lines 模式.
#+begin_src elisp
(add-hook 'org-mode-hook
	  (lambda()
	    (setq truncate-lines nil))) 
#+end_src
* 实时显示event和command历史
[[https://github.com/lewang/command-log-mode][lewang/command-log-mode: log commands to buffer]]

package search command-log-mode 安装

- =command-log-mode= (this turns the mode on, and turn on logging current buffer)
- =global-command-log-mode= (optional. Turn on logging for any buffer)
- =clm/open-command-log-buffer= (show the key/command output buffer)
* 安装主题
** 主题的切换
emacs 有默认的主题,可用通过命令切换: M-x load-theme <tab>
** 包管理器中的可用包
M-x package-list-packages
** onedark 主题 配置过程
*** 下载 one dark
[[https://github.com/jonathanchu/atom-one-dark-theme][one dark theme]]
#+begin_src elisp
git clone https://github.com/jonathanchu/atom-one-dark-theme.git
#+end_src
*** 复制主题到emacs的配置文件夹内
#+begin_src sh
mkdir -p ~/.emacs.d/theme/
cp atom-one-dark-theme.el ~/.emacs.d/theme/
#+end_src
*** 配置主题加载文件夹信息,启用主题
#+begin_src elisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/theme/")
(load-theme 'atom-one-dark t)
#+end_src
* emacs roam
** install
#+begin_src
M-x package-install RET org-roam RET
#+end_src
** 常规设置
#+begin_src elisp
(setq org-roam-directory "~/pkm-roam")  ;; roam 应用的文件夹
(defun start-roam-mode () (org-roam-mode t))
(add-hook 'after-init-hook 'start-roam-mode)

(setq org-roam-completion-system 'ivy) ;;使用ivy提示
#+end_src
** Roam Protocol
*** 配置中启用 Org-roam protocol
=(require 'org-roam-protocol)=
*** 为 emacsclient 创建一个桌面应用
1. mac 下使用 Platypus =brew cask install platypus=
2. 创建脚本 launch_emacs.sh
   #+begin_src elisp
    #!/usr/bin/env bash
    /usr/local/bin/emacsclient --no-wait $1
   #+end_src
3. 创建 Platypus app. 具体参数见 [[https://www.orgroam.com/manual.html#Roam-Protocol][Org-roam User Manual]]
4. 重启电脑
*** 禁止 chrome 弹出提示
=defaults write com.google.Chrome ExternalProtocolDialogShowAlwaysOpenCheckbox -bool true=

*** roam template ref
#+begin_src elisp
(setq org-roam-capture-ref-templates
      '(("r" "ref" plain (function org-roam-capture--get-point)
         ""
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n#+roam_key: ${ref}\n#+ROAM_TAGS: webpage\n"
         :unnarrowed t)))

#+end_src

** roam快捷键设置 
#+begin_src elisp

(general-create-definer roam-leader-def :prefix ";")
(define-key evil-motion-state-map  (kbd ";") nil)
;;(define-key evil-motion-state-map  (kbd ":") 'evil-repeat-find-char)
(my-leader-def 'normal 'override ";" 'evil-repeat-find-char)

(roam-leader-def 'normal 'override  ";" 'org-roam-find-file)
(roam-leader-def 'normal 'override  "f" 'evil-repeat-find-char) ;; 由于占用了; , 补偿回来
(roam-leader-def 'normal 'override  "l" 'org-roam)
(roam-leader-def 'normal 'override  "t" 'org-roam-tag-add)
(roam-leader-def 'normal 'override  "b" 'org-roam-switch-to-buffer)
(roam-leader-def 'normal 'override  "c" 'org-roam-capture)
(roam-leader-def 'normal 'override  "a" 'org-roam-alias-add)
(roam-leader-def 'normal 'override  "g" 'org-roam-graph)
(roam-leader-def 'normal 'override  "i" 'org-roam-insert)
(roam-leader-def 'normal 'override  "I" 'org-roam-insert-immediate)

#+end_src

* org 下常见问题修复
** evil 导致org link 按回车异常问题修复

#+begin_src elisp
(with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil)
  )

(setq org-return-follows-link t)
#+end_src
** 终端下 org TAB 无法执行 org-cycle

被 evil evil-jump-forward 占用

#+begin_src elisp
(define-key evil-motion-state-map  (kbd "TAB") nil)
#+end_src
** C-e 被evil占用

#+begin_src elisp
(define-key evil-motion-state-map  (kbd "C-e") nil)                          
(general-define-key "C-e" 'move-end-of-line)
#+end_src
**  org 在同一个窗口下打开文件 

当在org文件里 org-open-at-point 打开另一个org文件的时候, 默认是在第二个窗口打开.

我们设置成在当前鼠标所在的窗口打开
#+begin_src elisp
(setq org-link-frame-setup '((file . find-file)))
#+end_src
* 设置新建windows之后, 光标跟着移动过去 

#+begin_src elisp
(my-leader-def 'normal 'override "w b" (lambda () (interactive)(split-window-vertically) (other-window 1)))
(my-leader-def 'normal 'override "w r" '(lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+end_src
* 设置 org meta 快捷键 

#+begin_src elisp
(general-def org-mode-map "M-j" 'org-metadown)
(general-def org-mode-map "M-k" 'org-metaup)
(general-def org-mode-map "M-l" 'org-metaright)
(general-def org-mode-map "M-h" 'org-metaleft)
#+end_src
* 设置光标样式

#+begin_src elisp
(setq evil-motion-state-cursor 'box)  ; █
(setq evil-visual-state-cursor 'box)  ; █
(setq evil-normal-state-cursor 'box)  ; █
(setq evil-insert-state-cursor 'bar)  ; ⎸
(setq evil-emacs-state-cursor  'hbar) ; _

(setq evil-insert-state-cursor '((hbar . 5) "yellow")
      evil-normal-state-cursor '(box "purple"))
#+end_src
* 让 org 更好看

可用的插件:
https://github.com/integral-dw/org-superstar-mode
https://github.com/harrybournis/org-fancy-priorities
https://github.com/sabof/org-bullets


我安装的是 org-bullets
#+begin_src elisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))) 
#+end_src
* yasnippet

** install

#+begin_src elisp
(add-to-list 'load-path "~/.emacs.d.imymirror/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1) 
#+end_src

** usage
#+begin_src elisp
# -*- mode: snippet -*-
# name: org-code-block
# key: ;c
# --
#+begin_src ${1:elisp}
$0
,#+end_src
#+end_src

** [[https://emacs.stackexchange.com/questions/12552/how-bind-keys-to-a-specific-snippet-in-yasnippet-folder][How bind keys to a specific snippet in yasnippet folder?]]  

#+begin_src elisp
(defun exand-yasnippet-foobar ()
  "Expand the yasnippet named `foobar'."
  (interactive)
  (yas-expand-snippet (yas-lookup-snippet "foobar")))
#+end_src

* grab-mac-link
这是一个十分好用的插件, 可以将浏览器当前的网页 URL 直接复制到emacs中, 并且自动转化为 org 的格式
** install
M-x package-install
** usage
M-x grab-mac-link-dwim 根据当前buffer的major-mode来确定link type
#+begin_src elisp
(setq grab-mac-link-dwim-favourite-app 'chrome)
#+end_src

(grab-mac-link app &optional link-type)
 
#+begin_src elisp
(grab-mac-link 'chrome 'org)
    ⇒ "[[https://www.wikipedia.org/][Wikipedia]]"
#+end_src
* magit 
emacs 著名的 git 插件

#+begin_src elisp
(my-leader-def 'normal 'override "g" 'magit-status)
#+end_src
* telega
如果你使用telegram, 那么这个插件就是必装的.
** install 
#+BEGIN_SRC
brew install tdlib
#+END_SRC

由于 tdlib 和 telega 版本可能不一致, 所以需要安装一个稳定的版本
#+begin_src elisp
git clone --depth 1 --branch releases https://github.com/zevlg/telega.el
#+end_src

#+begin_src elisp
(with-eval-after-load 'telega
  (define-key telega-msg-button-map "k" nil)
  (writeroom-mode 1))
#+end_src

使用过程中可能需要安装 visual-fill-column , rainbow-identifiers

** 设置代理
#+begin_src elisp
;; (setq telega-proxies
;;       (list
;;        '(:server "127.0.0.1" :port 51503 :enable t
;;                  :type (:@type "proxyTypeSocks5"
;;                                :username your-username :password your-password))
;;        ))

(setq telega-proxies
      (list
       '(:server "127.0.0.1" :port 1087 :enable t
                 :type (:@type "proxyTypeHttp"
                               :username "" :password "" ))
       ))
#+end_src

** 去掉头像, 名字
#+begin_src elisp
;; (setq telega-use-images nil)
(setq telega-chat-show-avatars nil)
(setq telega-avatar-text-compose-chars nil)
#+end_src

** 使用外部的app打开 mp4
#+begin_src elisp
;; use external app to open MP4 file
(setq telega-animation-play-inline nil)
#+end_src

** writeroom 设置
#+begin_src elisp
(add-hook 'telega-root-mode-hook (lambda () (writeroom-mode 1)))

(defun my-telega-chat-mode ()
  (set (make-local-variable 'company-backends)
       (append (list telega-emoji-company-backend
                   'telega-company-username
                   'telega-company-hashtag)
             (when (telega-chat-bot-p telega-chatbuf--chat)
               '(telega-company-botcmd))))
  (company-mode 1)
  (writeroom-mode 1))

(add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)
#+end_src

** 设置快捷键
#+begin_src elisp
(general-define-key "C-M-)" 'telega) 
#+end_src
** 常用操作
*** Telega前缀map绑定：
- t (telega) :  开始telegram聊天. 如果指定 `ARG`, 就不会加入 root buffer.
- c (telega-chat-with) : 开始和符合 NAME 的人聊天.
- s (telega-saved-messages) : 切换到 SaveMessage. 如果 `C-u`, 保留该点, 否\\
- 则跳到buffer的末尾.
- b (telega-switch-buffer) : 交互方式切换聊天.
- f (telega-buffer-file-send) : 发送文档或者图片到聊天. 如果指定 `C-u`则传输文件. 否则按照`iamge-mode major-mode`的方式, 将文件作为图片发送.如果在交互模式下调用, 与当前buffer关联的文件会被当做FILE.
- w (telega-browse-url) : 打开URL.
- a (telega-account-switch) :  telegram账号切换.
*** 常用操作

1. 翻页 ctrl+f ctrl+b
2. vim 跳转到某一个行(回复或者修改或者删除) :数字
3. 回复 r, 删除d, 修改e
4. 使用Markdown格式之后, C-u RET : 通常用于传输一个 URL
5. C-c C-v (telega-chatbuf-attach-clipboard) (需要安装pngpaste) :  用于发送截图
6. telega-company-username(需要安装 company) : @某人 提示
7. =:= 按照回复跳转
8. 聊天换行 C-j
9. M-g < 跳到第一条信息. M-g> 跳到最后一条信息, 并标记为已读. M-g m 跳到下一条@ni未读 M-g u 跳到下一条未读.

notify 相关 : 订阅频道通知.
telega 有通知的, 不过得有d-bus协议的支持,像sway之类的就没有这个支持，要自己安个woe 之类的东西

换行改为 shift+Return SteamedFish/dotfiles =((telega-msg-button-map "k" nil))=

*** 发送消息Markdown格式
输入内容回车即可, 支持 markdown 格式(`c-u ret` 发送):

#+begin_src
1. *bold text*
2. _italic text_
2.1) __underline text__    (only for v2)
2.2) ~strike through text~ (only for v2)
3. `inlined code`
4. ```<language-name-not-displayed>
    first line of multiline preformatted code
    second line
    last line```
5. [link text](http://actual.url)
6. [username](tg://user?id=<user-id>)"
#+end_src
*** 发送流媒体 : photo, png, gif, vedio
C-c C-a (telega-chatbuf-attach) : 选择格式
*** 聊天内容过滤搜索
- C-c / (telega-chatbuf-filter)
- C-c C-c (telega-chatbuf-filter-cancel)
- C-c C-s (telega-chatbuf-filter-search)
* easymotion

** install
[[https://github.com/abo-abo/avy][abo-abo/avy: Jump to things in Emacs tree-style]]
** usage
avy-goto-char : 输入一个字符跳转 
avy-goto-char-2 : 输入两个连续字符跳转
avy-goto-char-timer : 输入任意数量的连续字符跳转, 默认 avy-timeout-seconds 0.5s
avy-goto-line : 跳到行首
avy-goto-word-1 : 输入一个单词
avy-goto-word-0 : 无需输入, 标识出单词
avy-org-goto-heading-timer : 跟 avy-goto-char-timer 类似, 跳到org 标题
avy-org-refile-as-child 

** keybinding
#+begin_src elisp
(define-key evil-normal-state-map  (kbd "s") nil) ;; evil-substitute
(general-create-definer s-leader-def :prefix "s")
(s-leader-def 'normal "s" 'avy-goto-char) 
(s-leader-def 'normal "l" 'avy-goto-line) 
(s-leader-def 'normal "j" 'avy-goto-line-below) 
(s-leader-def 'normal "k" 'avy-goto-line-above) 
(s-leader-def 'normal "s h" 'avy-org-goto-heading-timer) 
(s-leader-def 'normal "s r" 'avy-org-refile-as-child) 
#+end_src

* 当打开多个emacs进程的时候, 根据 pid 打开 application  
** 简单学习一下 appliscript
[[https://sspai.com/post/46912][AppleScript 入门：探索 macOS 自动化 - 少数派]]
** 使用 applescript 根据 pid 打开 application 
#+begin_src sh
set thisUnixID to (do shell script "ps aux | grep -v grep |grep -i imymirr.*/ini|awk '{print $2}'") as integer

tell application "System Events"
	set frontmost of every process whose unix id is thisUnixID to true
end tell
#+end_src

方式1 : 
保存为 open-emacs.app
Alfred 绑定快捷键, 呼起 open-emacs.app

方式2:
Alfred直接建立workflow, 执行上述的applescript

* undo redo
emacs 著名的诡异实现 redo undo, 找一个替代品

[[https://github.com/emacsmirror/undo-fu][emacsmirror/undo-fu: Undo helper with redo]]
#+begin_src elisp
(define-key evil-normal-state-map "u" 'undo-fu-only-undo)
(define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)
#+end_src

* winner mode 
我通过winner-mode 来简单实现, window窗口的 undo redo
M-x winner-mode RET

#+begin_src elisp
(my-leader-def 'normal 'override "w a" 'winner-undo)
(my-leader-def 'normal 'override "w f" 'winner-redo)
#+end_src

* projectile
** install
[[https://github.com/bbatsov/projectile][bbatsov/projectile: Project Interaction Library for Emacs]]

M-x package-install [RET] projectile [RET]
** usage

设置启动键
#+begin_src elisp
(projectile-mode +1)
(general-def 'normal "C-;" 'projectile-command-map) 
(my-leader-def 'normal "p" 'projectile-command-map) 
#+end_src

设置工程搜索路径
#+begin_src elisp
(setq projectile-project-search-path '("~/pkm-roam"))
#+end_src
*** command
- Find file in current project (s-p f)
- Switch project (s-p p) (you can also switch between open projects with s-p q)
- Grep (search for text/regexp) in project (s-p s g) (grep alternatives like ag, pt and rg are also supported)
- Replace in project (s-p r)
- Invoke any Projectile command via the Projectile Commander (s-p m)
- Toggle between implementation and test (s-p t)
- Toggle between related files (e.g. foo.h <→ foo.c and Gemfile <→ Gemfile.lock) (s-p a)
- Run a shell command in the root of the project (s-p ! for a sync command and s-p & for an async command)
- Run various pre-defined project commands like:
- build/compile project (s-p c)
- test project (s-p T)
* 注释 comment
** install
[[https://github.com/redguardtoo/evil-nerd-commenter][redguardtoo/evil-nerd-commenter: Comment/uncomment lines efficiently. Like Nerd Commenter in Vim]]
** usage
#+begin_src elisp
(evilnc-default-hotkeys nil t)
(g-leader-def 'normal "i" 'evilnc-comment-or-uncomment-lines)
(g-leader-def 'normal "\\" 'evilnc-comment-operator) 
;; (g-leader-def 'normal "l" 'evilnc-quick-comment-or-uncomment-to-the-line)
;; (g-leader-def 'normal "cc" 'evilnc-copy-and-comment-lines
;; (g-leader-def 'normal "cp" 'evilnc-comment-or-uncomment-paragraphs
;; (g-leader-def 'normal "cr" 'comment-or-uncomment-region
;; (g-leader-def 'normal "cv" 'evilnc-toggle-invert-comment-line-by-line
;; (g-leader-def 'normal "."  'evilnc-copy-and-comment-operator)
#+end_src
* 不用移动光标, 实现org link的快速跳转

** 方案
[[https://github.com/noctuid/link-hint.el][noctuid/link-hint.el: Pentadactyl-like Link Hinting in Emacs with Avy]]
[[https://github.com/abo-abo/ace-link][abo-abo/ace-link: Quickly follow links in Emacs]]

选择第一个方案
** 使用 
#+begin_src elisp
;;(setq browse-url-browser-function 'browse-url-chromium)
;;(setq browse-url-browser-function 'browse-url-default-browser)

;; This will cause the overlays to be displayed before the links (and not cover them)
(setq link-hint-avy-style 'pre)
(setq link-hint-avy-style 'post)

(s-leader-def 'normal "l" 'link-hint-open-link) 
(s-leader-def 'normal "c" 'link-hint-copy-link) 
#+end_src
* 使用数字在window之间跳转 

[[https://github.com/deb0ch/emacs-winum][deb0ch/emacs-winum: Window numbers for Emacs - Navigate windows and frames using numbers]]

M-x package-install RET winum RET

#+begin_src elisp
(require 'winum)
(winum-mode)
#+end_src

#+begin_src elisp

(my-leader-def 'normal 'override "1" 'winum-select-window-1)
(my-leader-def 'normal 'override "2" 'winum-select-window-2)
(my-leader-def 'normal 'override "3" 'winum-select-window-3)
(my-leader-def 'normal 'override "4" 'winum-select-window-4)
(my-leader-def 'normal 'override "5" 'winum-select-window-5)
(my-leader-def 'normal 'override "6" 'winum-select-window-6)
(my-leader-def 'normal 'override "7" 'winum-select-window-7)
(my-leader-def 'normal 'override "8" 'winum-select-window-8)


#+end_src
* 快速创建 scratch-buffer 

from [[https://everything2.com/index.pl?node_id=1038451][useful emacs lisp functions - Everything2.com]] 

#+begin_src elisp
(defun create-scratch-buffer nil
  "create a new scratch buffer to work in. (could be *scratch* - *scratchX*)"
  (interactive)
  (let ((n 0)
	bufname)
    (while (progn
	     (setq bufname (concat "*scratch"
				   (if (= n 0) "" (int-to-string n))
				   "*"))
	     (setq n (1+ n))
	     (get-buffer bufname)))
    (switch-to-buffer (get-buffer-create bufname))
    (if (= n 1) (lisp-interaction-mode)) ; 1, because n was incremented
    ))

(defun imy/create-1/3-scratch-buffer nil
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (create-scratch-buffer))
)
#+end_src

#+begin_src elisp
(my-leader-def 'normal 'override "x" 'imy/create-1/3-scratch-buffer)
#+end_src
* emacs frame 键位绑定 

** 命令
make-frame
delete-frame
suspend-frame : 最小化
other-frame  
delete-other frame
toggle-frame-maximized
toggle-frame-fullscreen

** keybinding
#+begin_src elisp
(my-leader-def 'normal 'override "f n" 'make-frame)
(my-leader-def 'normal 'override "f d" 'delete-frame)
(my-leader-def 'normal 'override "f D" 'delete-other-frame)
(my-leader-def 'normal 'override "f m" 'toggle-frame-maximized)
#+end_src

** frame 自动全屏设置
[[file:20210212174504-emacs_frame_hook_and_frame_alist.org][emacs frame hook and alist]]

** emacsclient -c 替代 make-frame
[[https://stackoverflow.com/questions/8363808/how-do-i-provide-a-command-line-option-to-emacsclient][emacs - How do I provide a command-line option to emacsclient? - Stack Overflow]]

#+begin_src elisp
(defun imy/make-frame-by-emacsclient ()
  "make frame by emacsclient -c"
  (interactive)
  (shell-command "emacsclient -c &")
)
#+end_src

#+begin_src elisp
(defun imy/make-frame-by-emacsclient ()
  "make frame by emacsclient -c"
  (interactive)
  (start-process-shell-command "make-frame" nil "emacsclient -c -a \"\" -F \"((fullscreen . maximized))\"")
)
#+end_src

* reveal in finder : 从emacs直接跳转的finder

[[https://stackoverflow.com/questions/20510333/in-emacs-how-to-show-current-file-in-finder#:~:text=This%20is%20not%20an%20Emacs,will%20then%20open%20in%20Finder.][org mode - in Emacs, how to show current file in Finder? - Stack Overflow]]

#+begin_src elisp
(defun open-current-file-in-finder ()
  (interactive)
  (shell-command "open -R ."))
  
(defun open-current-file-directory ()
  (interactive)
  (shell-command "open ."))

(defun imy/reveal-in-finder ()
  (interactive)
  (shell-command (concat "open -R " buffer-file-name)))
#+end_src

#+begin_src elisp
(my-leader-def 'normal 'override "o o" 'imy/reveal-in-finder)
#+end_src

* emacs open eshell not fullscreen

[[https://emacs.stackexchange.com/questions/44831/how-to-force-new-shell-to-appear-in-current-window][How to force new `shell` to appear in current window? - Emacs Stack Exchange]]

close eshell 关闭当前buffer也可以
#+begin_src elisp
(defun imy/eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

(defun imy/eshell-close ()
  "Closes the winexitdow created by the function 'eshell-here'"
  (interactive)
  (evil-insert nil nil nil)
  (insert "exit")
  (eshell-send-input)
  (delete-window))
#+end_src

#+begin_src elisp
(my-leader-def 'normal 'override "o e" 'imy/eshell-here)
(my-leader-def 'normal 'override "c e" 'imy/eshell-close)
#+end_src

* emacs 打开终端 iTerm

#+begin_src elisp
(defun imy/open-iTerm ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (shell-command "open -a iTerm .")
)
#+end_src

#+begin_src elisp
(my-leader-def 'normal 'override "o i" 'imy/open-iTerm)
#+end_src

* yes or no 
[[https://emacs.stackexchange.com/questions/22569/kill-buffer-with-y-or-n-p-instead-of-yes-or-no-p][kill-buffer with y-or-n-p instead of yes-or-no-p - Emacs Stack Exchange]]


#+begin_src elisp
(defun yes-or-no-p->-y-or-n-p (orig-fun &rest r)
  (cl-letf (((symbol-function 'yes-or-no-p) #'y-or-n-p))
    (apply orig-fun r)))

(advice-add 'kill-buffer :around #'yes-or-no-p->-y-or-n-p)
#+end_src

* emacs kill-other-buffers kill-all-buffers

[[https://stackoverflow.com/questions/3417438/close-all-buffers-besides-the-current-one-in-emacs][elisp - Close all buffers besides the current one in Emacs - Stack Overflow]]

#+begin_src elisp
(defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer 
          (delq (current-buffer) 
                (cl-remove-if-not 'buffer-file-name (buffer-list)))))
#+end_src

#+begin_src elisp
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
#+end_src

* emacs kill-this-file

[[https://emacs.stackexchange.com/questions/26277/how-to-make-emacs-automatically-kill-buffer-after-invoking-delete-file-command][How to make emacs automatically kill buffer after invoking delete-file command? - Emacs Stack Exchange]]

#+begin_src elisp
(defun delete-file-visited-by-buffer (buffername)
  "Delete the file visited by the buffer named BUFFERNAME."
  (interactive "b")
  (let* ((buffer (get-buffer buffername))
         (filename (buffer-file-name buffer)))
    (when filename
      (delete-file filename)
      (kill-buffer-ask buffer))))

#+end_src

kill-buffer-ask 可以改成 kill-buffer

* emacs amx 
** install
[[https://github.com/DarwinAwardWinner/amx][DarwinAwardWinner/amx: An alternative M-x interface for Emacs.]]

fork from smex

** usage
- amx-mode :  remap execute-extended-command to amx
- amx-show-unbound-commands : shows frequently used commands that have no key bindings.
** amx-save-file
amx-save-file : 保存文件状态, 默认路径~/.emacs.d/amx-items 
** Completion backends
- amx有三个后端 : tandard Emacs completion, Ido completion, and ivy completion
- 默认自动检测
- 可以通过 amx-backend 来指定
** Speeding up Amx
有两个特性导致0.25s的延迟 : command ignoring and showing key bindings.  
** amx 对 counsel-M-x 排序的加成

查看 counsel-M-x 的描述:
#+begin_src elisp
(counsel-M-x &optional INITIAL-INPUT)

Ivy version of ‘execute-extended-command’.
Optional INITIAL-INPUT is the initial input in the minibuffer.
This function integrates with either the ‘amx’ or ‘smex’ package
when available, in that order of precedence.
#+end_src

* early-init.el


Early Init · Emacs 27 introduces early-init.el, which is run before init.el, before package and UI initialization happens.
** Compatibility with Emacs 26
Ensure emacs-version>=26, manually require early-init configurations if emacs-version<27.
#+begin_src elisp
(cond ((version< emacs-version "26.1")
       (warn "M-EMACS requires Emacs 26.1 and above!"))
      ((let* ((early-init-f (expand-file-name "early-init.el" user-emacs-directory))
              (early-init-do-not-edit-d (expand-file-name "early-init-do-not-edit/" user-emacs-directory))
              (early-init-do-not-edit-f (expand-file-name "early-init.el" early-init-do-not-edit-d)))
         (and (version< emacs-version "27")
              (or (not (file-exists-p early-init-do-not-edit-f))
                  (file-newer-than-file-p early-init-f early-init-do-not-edit-f)))
         (make-directory early-init-do-not-edit-d t)
         (copy-file early-init-f early-init-do-not-edit-f t t t t)
         (add-to-list 'load-path early-init-do-not-edit-d)
         (require 'early-init))))
#+end_src
** 启动优化项
#+begin_src elisp
(setq gc-cons-threshold 100000000)

(setq package-enable-at-startup nil)

(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

(setq site-run-file nil)

;;(menu-bar-mode -1)
(unless (and (display-graphic-p) (eq system-type 'darwin))
  (push '(menu-bar-lines . 0) default-frame-alist))
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src
* emacs org-download
** introduce
[[https://github.com/abo-abo/org-download][abo-abo/org-download: Drag and drop images to Emacs org-mode]]

** setting
#+begin_src elisp
;;; lisp/c-org-download.el -*- lexical-binding: t; -*-

(require 'org-download)

(defun imy/im-file-name ()
  "copy buffer's full path to kill ring"
  (interactive)
  (when buffer-file-name
    ;; (file-name-nondirectory (kill-new (file-truename buffer-file-name)))))
     ;; (file-name-nondirectory  (file-truename buffer-file-name))))
     (file-name-sans-extension (buffer-name))))

(defun imy/org-download-paste-clipboard (&optional use-default-filename)
  (interactive "P")
  (setq org-download-image-dir (concat "images/" (imy/im-file-name)))
  (let ((file
         (if (not use-default-filename)
             (read-string (format "Filename [%s]: " org-download-screenshot-basename)
                          nil nil org-download-screenshot-basename)
           nil)))
(org-download-clipboard file)))

(with-eval-after-load "org"
  (setq org-download-method 'directory)
  (setq org-download-image-dir  "images/")
  (setq org-download-heading-lvl nil)
  (setq org-download-timestamp "%Y%m%d-%H%M%S_")
  (setq org-image-actual-width nil)
  (setq org-src-window-setup 'split-window-right)
  (setq org-download-annotate-function (lambda (_link) ""))
  )

#+end_src

keybinding
#+begin_src elisp
(my-leader-def 'normal 'override "t p" 'imy/org-download-paste-clipboard)
(general-def 'normal "C-; i" 'imy/org-download-paste-clipboard) 
#+end_src

* latex 

使用 dvisvgm , 显示的图片更清晰
#+begin_src elisp
(setq org-preview-latex-default-process 'dvisvgm)
#+end_src

* org-capture

#+begin_src elisp
;; inbox
(add-to-list 'org-capture-templates
             '("i" "Inbox" entry (file "~/pkm-roam/inbox.org")
             "* %U %^{heading} %^g\n %?\n"))
#+end_src

* emacs writeroom mode

M-x package-install

M-x writeroom-mode RET
M-x global-writeroom-mode RET

#+begin_src elisp
(setq writeroom-width 100)
#+end_src

#+begin_src elisp
(my-leader-def 'normal 'override "t z" 'writeroom-mode)
#+end_src

* 括号导航相关函数

#+begin_src elisp
    (defun move-forward-paren (&optional arg)
        "Move forward parenthesis"
        (interactive "P"()
        (if (looking-at ")") (forward-char 1))
        (while (not (looking-at ")")) (forward-char 1))
    ) 

    (defun move-backward-paren (&optional arg)
        "Move backward parenthesis"
        (interactive "P")
        (if (looking-at "(") (forward-char -1))
        (while (not (looking-at "(")) (backward-char 1))
    ) 

    (defun move-forward-sqrParen (&optional arg)
        "Move forward square brackets"
        (interactive "P")
        (if (looking-at "]") (forward-char 1))
        (while (not (looking-at "]")) (forward-char 1))
    ) 

    (defun move-backward-sqrParen (&optional arg)
        "Move backward square brackets"
        (interactive "P")
        (if (looking-at "[[]") (forward-char -1))
        (while (not (looking-at "[[]")) (backward-char 1))
    ) 

    (defun move-forward-curlyParen (&optional arg)
        "Move forward curly brackets"
        (interactive "P")
        (if (looking-at "}") (forward-char 1))
        (while (not (looking-at "}")) (forward-char 1))
    ) 

    (defun move-backward-curlyParen (&optional arg)
        "Move backward curly brackets"
        (interactive "P")
        (if (looking-at "{") (forward-char -1))
        (while (not (looking-at "{")) (backward-char 1))
    ) 

#+end_src
* which-key
** install
M-x package-install which-key RET

=(which-key-mode)=
** usage
*** 定义快捷键说明文本
#+begin_src elisp
(which-key-add-key-based-replacements
  "SPC b" "buffer"
  "SPC c" "close or hide"
  "SPC m" "bookmark"
  "SPC o" "open"
  "SPC s" "search"
  "SPC t" "toggle"
  "SPC w" "window"
  "SPC f" "frame"
  "SPC h" "help"
)
#+end_src

*** 有用选项
#+begin_src elisp
(setq which-key-idle-delay 1.0)
(setq which-key-prefix-prefix "+" )
#+end_src
* 敏感信息的处理

[[https://emacs.stackexchange.com/questions/8069/elisp-how-to-exclude-sensitive-information-from-an-init-file-ie-login-credent][Elisp: How to exclude sensitive information from an init file? (ie login credentials) - Emacs Stack Exchange]]

[[https://www.reddit.com/r/emacs/comments/5vahvh/how_to_properly_save_sensitive_information_in/][How to properly save sensitive information in emacs configs? : emacs]]
 
将敏感信息移出.emacs.d, 放在private文件夹
#+begin_src elisp
(when (file-exists-p "~/private/")
  (load "~/private/sensitive.el"))
#+end_src
* 行或者mode-line背景颜色设置

M-x list-faces-display 

hl-line: 给光标所在行设置颜色
mode-line : 给mode-line添加背景色

#+begin_src elisp
(require 'hl-line)

(set-face-background 'hl-line "midnight blue")
(set-face-background hl-line-face "gray13")


(set-face-background 'mode-line "color-28")
#+end_src


需要注意 直接在init.el 设置可能会出错, 有三种方案: 
1. global-hl-line-mode on 
2. (with-eval-after-load 'hl-line ...)
3. I should required it first.

